<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://robotics.ucmerced.edu/task"
           xmlns="https://robotics.ucmerced.edu/task"
           xmlns:xsi="https://robotics.ucmerced.edu/task"
           elementFormDefault="qualified">

    <!-- Schema defining Boston Dynamics Spot robot -->

    <!-- Root element for the task -->
    <xs:element name="TaskTemplate">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="CompositeTaskInformation" type="CompositeTaskInformationType"/>
                <!-- I don't think these are needed in the global task definition -->
                <!-- <xs:element name="StateVariables" type="StateVariablesType"/>
                <xs:element name="Parameters" type="ParametersType"/> -->
                <xs:element name="Preconditions" type="PreconditionsType" minOccurs="0"/>
                <xs:element name="AtomicTasks" type="AtomicTasksType"/>
                <xs:element name="ActionSequence" type="ActionSequenceType"/>
                <xs:element name="Outcome" type="OutcomeType" minOccurs="0"/>
                <xs:element name="Exits" type="ExitsType" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!-- Simple type for Manipulator Actions -->
    <xs:simpleType name="manipulatorActionTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="pickObject"/>
            <xs:enumeration value="placeObject"/>
            <xs:enumeration value="identifyObject"/>
            <xs:enumeration value="goToLocation"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="comparisonType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="lt"/>
            <xs:enumeration value="lte"/>
            <xs:enumeration value="gt"/>
            <xs:enumeration value="gte"/>
            <xs:enumeration value="eq"/>
            <xs:enumeration value="neq"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for pickObject -->
    <xs:complexType name="pickObjectType">
        <xs:sequence>
            <xs:element name="gripForce" type="xs:decimal" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for placeObject -->
    <xs:complexType name="placeObjectType">
        <xs:sequence>
            <xs:element name="releaseForce" type="xs:decimal" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Simple type for end effector movement types -->
    <xs:simpleType name="movementType">
        <xs:restriction base="xs:string">
            <!-- relative movement defined by movement from end effector current position -->
            <!-- NOTE: +X is left, -X is right, +Y is up, -Y is down, +Z is forward, -Z is backward -->
            <xs:enumeration value="end_effector_link"/>
            <!-- absolute movement defined by movement from origin point, not current position -->
            <!-- NOTE: +X is right, -X is left, +Y is forward, -Y is backward, +Z is up, -Z is down -->
            <xs:enumeration value="base_link"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for object segmentation -->
    <xs:complexType name="identifyObjectType">
        <xs:sequence>
            <!-- object characteristics -->
            <xs:element name="objectName" type="xs:string"/>
            <!-- distance in meters, normal distance is set to be 0.75m. adjust according to requests -->
            <xs:element name="objectColor" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="distanceToObject" type="xs:float"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for moving to a pose -->
    <xs:complexType name="goToLocationType">
        <xs:sequence>
            <xs:element name="Latitude" type="xs:decimal"/>
            <xs:element name="Longitude" type="xs:decimal"/>
            <xs:element name="Reward" type="xs:decimal" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for manipulatorActions -->
    <xs:complexType name="manipulatorActions">
        <xs:sequence>
            <xs:element name="ActionType" type="manipulatorActionTypes"/>
            <xs:choice>
                <xs:element name="pickObject" type="pickObjectType"/>
                <xs:element name="placeObject" type="placeObjectType"/>
                <xs:element name="identifyObject" type="identifyObjectType"/>
                <xs:element name="goToLocation" type="goToLocationType"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for Composite Task Information -->
    <xs:complexType name="CompositeTaskInformationType">
        <xs:sequence>
            <xs:element name="TaskID" type="xs:string"/>
            <xs:element name="TaskDescription" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for State Variables -->
    <xs:complexType name="StateVariablesType">
        <xs:sequence>
            <xs:element name="StateVariable" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="VariableName" type="xs:string"/>
                        <xs:element name="VariableValue" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for State Variables -->
    <xs:complexType name="ParametersType">
        <xs:sequence>
            <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="VariableName" type="xs:string"/>
                        <xs:element name="VariableValue" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Simple type for Condition Types -->
    <xs:simpleType name="stateTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="atHomeBase"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for Preconditions -->
    <xs:complexType name="PreconditionsType">
        <xs:sequence>
            <xs:element name="Precondition" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Condition" type="stateTypes"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <!-- Complex type for Atomic Tasks -->
    <xs:complexType name="AtomicTasksType">
        <xs:sequence>
            <xs:element name="AtomicTask" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="TaskID" type="xs:string"/>
                        <xs:element name="TaskDescription" type="xs:string"/>
                        <xs:element name="StateVariables" type="StateVariablesType" minOccurs="0"/>
                        <xs:element name="Action" type="manipulatorActions" minOccurs="1" maxOccurs="1"/>
                        <xs:element name="Preconditions" type="PreconditionsType" minOccurs="0"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Conditional type -->
    <xs:complexType name="ConditionalType">
        <xs:sequence>
            <xs:choice>
                <xs:sequence>
                    <xs:element name="Comparator" type="comparisonType" minOccurs="1" maxOccurs="1"/>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <!-- use hard for number value comparisons combined with comparisonType -->
                        <xs:element name="HardValue" type="xs:double" minOccurs="1" maxOccurs="1"/>
                    </xs:choice>
                </xs:sequence>
                <!-- strictly for true/false -->
                <xs:element name="ReturnStatus" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- ConditionalAction type -->
    <xs:complexType name="ConditionalActionsType">
        <xs:sequence>
            <xs:element name="Conditional" type="ConditionalType" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element name="Sequence" type="ConditionalSequenceType" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Full sequence of actions + conditional complexType for behavior tree -->
    <xs:complexType name="ConditionalSequenceType">
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="TaskID" type="xs:string"/>
                <xs:element name="ConditionalActions" type="ConditionalActionsType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ActionSequenceType">
        <xs:sequence>
            <xs:element name="Sequence" type="ConditionalSequenceType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- TODO: unused for now are the below complexTypes. -->

    <!-- Complex type for Outcome -->
    <xs:complexType name="OutcomeType">
        <xs:sequence>
            <xs:element name="State" type="stateTypes" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Simple type for exit types -->
    <xs:simpleType name="exitTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="nominal"/>
            <xs:enumeration value="faulted"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for Exits -->
    <xs:complexType name="ExitsType">
        <xs:sequence>
            <xs:element name="Exit" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Type" type="exitTypes"/>
                        <!-- Something else to describe exit case -->
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- TODO: really unused for now are the above complexTypes. -->

</xs:schema>