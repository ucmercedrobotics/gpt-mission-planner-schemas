<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://robotics.ucmerced.edu/task"
           xmlns="https://robotics.ucmerced.edu/task"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           elementFormDefault="qualified">

    <!-- Schema defining a ClearPath Husky 4 wheeled robot -->

    <!-- Root element for the task -->
    <xs:element name="TaskTemplate">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="CompositeTaskInformation" type="CompositeTaskInformationType"/>
                <!-- I don't think these are needed in the global task definition -->
                <!-- <xs:element name="StateVariables" type="StateVariablesType"/>
                <xs:element name="Parameters" type="ParametersType"/> -->
                <xs:element name="Preconditions" type="PreconditionsType" minOccurs="0"/>
                <xs:element name="AtomicTasks" type="AtomicTasksType"/>
                <xs:element name="ActionSequence" type="ActionSequenceType"/>
                <xs:element name="Outcome" type="OutcomeType" minOccurs="0"/>
                <xs:element name="Exits" type="ExitsType" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!-- Simple type for Robot Actions -->
    <xs:simpleType name="robotActionTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="takeThermalPicture"/>
            <xs:enumeration value="takeAmbientTemperature"/>
            <xs:enumeration value="takeCO2Reading"/>
            <xs:enumeration value="moveToGPSLocation"/>
            <xs:enumeration value="moveToRelativeLocation"/>
            <xs:enumeration value="orientRobotHeading"/>
            <xs:enumeration value="activateSeeder"/>
            <xs:enumeration value="deactivateSeeder"/>
            <xs:enumeration value="selectSeed"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="comparisonType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="lt"/>
            <xs:enumeration value="lte"/>
            <xs:enumeration value="gt"/>
            <xs:enumeration value="gte"/>
            <xs:enumeration value="eq"/>
            <xs:enumeration value="neq"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for selectSeedType -->
    <xs:complexType name="selectSeedType">
        <xs:sequence>
            <xs:choice>
                <xs:element name="chineseBittermelon"/>
                <xs:element name="indianBittermelon"/>
                <xs:element name="longBean"/>
                <xs:element name="pumpkin"/>
                <xs:element name="squash"/>
                <xs:element name="tomato"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for plantSeed -->
    <xs:complexType name="activateSeederType">
        <xs:sequence>
            <!-- activate true turns on seeder and lowers implement -->
            <xs:element name="activate" type="xs:boolean"/>
            <!-- depth represented in millimeters -->
            <xs:element name="depth" type="xs:decimal"/>
            <!-- spacing between each set of seeds planted in meters -->
            <xs:element name="seedSpacing" type="xs:decimal"/>
            <xs:element name="numberOfSeedsPerPlant" type="xs:integer"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for deactivateSeederType -->
    <xs:complexType name="deactivateSeederType">
        <xs:sequence>
            <!-- deactivate true turns off seeder and lifts implement -->
            <xs:element name="deactivate" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for takeThermalPicture -->
    <xs:complexType name="takeThermalPictureType">
        <xs:sequence>
            <xs:element name="numberOfPictures" type="xs:integer"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for takeAmbientTemperature -->
    <xs:complexType name="takeAmbientTemperatureType">
        <xs:sequence>
            <xs:element name="numberOfSamples" type="xs:integer"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for takeCO2Reading -->
    <xs:complexType name="takeCO2ReadingType">
        <xs:sequence>
            <xs:element name="numberOfSamples" type="xs:integer"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for moveToGPSLocationType -->
    <xs:complexType name="moveToGPSLocationType">
        <xs:sequence>
            <xs:choice>
                <xs:element name="id" type="xs:integer"/>
                <xs:sequence>
                    <xs:element name="latitude" type="xs:decimal"/>
                    <xs:element name="longitude" type="xs:decimal"/>
                </xs:sequence>
            </xs:choice>
            <xs:element name="reward" type="xs:decimal" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for moveToRelativeLocationType -->
    <xs:complexType name="moveToRelativeLocationType">
        <xs:sequence>
            <!-- relative to current robot position -->
            <!-- positive X is forward, negative X is backward -->
            <xs:element name="x" type="xs:decimal"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for orientRobotHeadingType -->
    <xs:complexType name="orientRobotHeadingType">
        <xs:sequence>
            <!-- absolute means turning using cardinal directions: set True -->
            <!-- relative means turning using the robot's local body frame: set False -->
            <xs:element name="absolute" type="xs:boolean"/>
            <xs:element name="yaw" type="xs:decimal"/>
        </xs:sequence>
    </xs:complexType>


    <!-- Complex type for robotActions -->
    <xs:complexType name="robotActions">
        <xs:sequence>
            <xs:element name="ActionType" type="robotActionTypes" minOccurs="1"/>
            <xs:choice>
                <xs:element name="takeThermalPicture" type="takeThermalPictureType"/>
                <xs:element name="takeAmbientTemperature" type="takeAmbientTemperatureType"/>
                <xs:element name="takeCO2Reading" type="takeCO2ReadingType"/>
                <xs:element name="moveToGPSLocation" type="moveToGPSLocationType"/>
                <xs:element name="moveToRelativeLocation" type="moveToRelativeLocationType"/>
                <xs:element name="orientRobotHeading" type="orientRobotHeadingType"/>
                <xs:element name="activateSeeder" type="activateSeederType"/>
                <xs:element name="deactivateSeeder" type="deactivateSeederType"/>
                <xs:element name="selectSeed" type="selectSeedType"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for Composite Task Information -->
    <xs:complexType name="CompositeTaskInformationType">
        <xs:sequence>
            <xs:element name="TaskID" type="xs:string"/>
            <xs:element name="TaskDescription" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for State Variables -->
    <xs:complexType name="StateVariablesType">
        <xs:sequence>
            <xs:element name="StateVariable" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="VariableName" type="xs:string"/>
                        <xs:element name="VariableValue" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Complex type for State Variables -->
    <xs:complexType name="ParametersType">
        <xs:sequence>
            <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="VariableName" type="xs:string"/>
                        <xs:element name="VariableValue" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Simple type for Condition Types -->
    <xs:simpleType name="stateTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="atStartingPoint"/>
            <xs:enumeration value="atEndPoint"/>
            <xs:enumeration value="batteryFull"/>
            <xs:enumeration value="batteryCharging"/>
            <xs:enumeration value="batteryLow"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for Preconditions -->
    <xs:complexType name="PreconditionsType">
        <xs:sequence>
            <xs:element name="Precondition" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Condition" type="stateTypes"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <!-- Complex type for Atomic Tasks -->
    <xs:complexType name="AtomicTasksType">
        <xs:sequence>
            <xs:element name="AtomicTask" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="TaskID" type="xs:string"/>
                        <xs:element name="TaskDescription" type="xs:string"/>
                        <xs:element name="StateVariables" type="StateVariablesType" minOccurs="0"/>
                        <xs:element name="Action" type="robotActions" />
                        <xs:element name="Preconditions" type="PreconditionsType" minOccurs="0"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Conditional type -->
     <!-- TODO: update this to incorporate the precondition type, maybe, or add a new type for conditionals -->
    <xs:complexType name="ConditionalType">
        <xs:sequence>
            <xs:element name="Comparator" type="comparisonType" />
            <xs:choice >
                <xs:element name="HardValue" type="xs:double"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- ConditionalAction type -->
    <xs:complexType name="ConditionalActionsType">
        <xs:sequence>
            <xs:element name="Conditional" type="ConditionalType" minOccurs="1" maxOccurs="unbounded"/>
            <xs:choice>
                <xs:element name="Break"/>
                <xs:element name="Sequence" type="ConditionalSequenceType" />
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Loop type -->
    <xs:complexType name="LoopType">
        <xs:sequence>
            <!-- 0 in Loop Count represents indefinite looping -->
            <xs:element name="LoopCount" type="xs:integer" />
            <xs:element name="Sequence" type="ConditionalSequenceType" />
        </xs:sequence>
    </xs:complexType>

    <!-- Full sequence of actions + conditional complexType for behavior tree -->
    <xs:complexType name="ConditionalSequenceType">
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="TaskID" type="xs:string"/>
                <xs:element name="Loop" type="LoopType" minOccurs="0" maxOccurs="1"/>
                <xs:element name="ConditionalActions" type="ConditionalActionsType" minOccurs="0" maxOccurs="2"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ActionSequenceType">
        <xs:sequence>
            <xs:element name="Sequence" type="ConditionalSequenceType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- TODO: unused for now are the below complexTypes. -->

    <!-- Complex type for Outcome -->
    <xs:complexType name="OutcomeType">
        <xs:sequence>
            <xs:element name="State" type="stateTypes" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Simple type for exit types -->
    <xs:simpleType name="exitTypes">
        <xs:restriction base="xs:string">
            <xs:enumeration value="nominal"/>
            <xs:enumeration value="faulted"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Complex type for Exits -->
    <xs:complexType name="ExitsType">
        <xs:sequence>
            <xs:element name="Exit" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Type" type="exitTypes"/>
                        <!-- Something else to describe exit case -->
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- TODO: really unused for now are the above complexTypes. -->

</xs:schema>
